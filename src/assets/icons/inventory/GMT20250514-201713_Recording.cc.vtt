WEBVTT

00:23:50.000 --> 00:24:01.000
Into a container.

00:24:01.000 --> 00:24:09.000
That's right, hence. Let me see this container.

00:24:09.000 --> 00:24:14.000
And hit this point, you know.

00:24:14.000 --> 00:24:29.000
Is a variable that I lost. Something inside so inside is container legacy container this container is key.

00:24:29.000 --> 00:24:36.000
Inside a inspiring one. I have… container D.

00:24:36.000 --> 00:24:46.000
Any site 209B I am starting a name for a name called Kushi. Let's take it like that.

00:24:46.000 --> 00:25:02.000
And I'm called Kushi.

00:25:02.000 --> 00:25:10.000
Let's keyword. If I want to declare viral status.

00:25:10.000 --> 00:25:23.000
Let me see. Let's Then after that.

00:25:23.000 --> 00:25:26.000
I stayed the entity i feel like we are seen over here.

00:25:26.000 --> 00:25:39.000
I've declared an integer of an unsigned integer of uses before. So anytime you declare an impede down you are supposed to

00:25:39.000 --> 00:25:53.000
State and it's So I'm trying to see once uh This uses the four is going to sell

00:25:53.000 --> 00:25:59.000
It's not necessary to bring in CGI over here. Let me see Let's number.

00:25:59.000 --> 00:26:10.000
So number, meaning I am storing zero inside number so anytime i call number number is going to output zero to me.

00:26:10.000 --> 00:26:17.000
So that's how we flavor our most. And the type and location like I mentioned.

00:26:17.000 --> 00:26:33.000
Anytime you declare. This is the type and location of his release what is going to tell the type of environment we are trying to play. So we have… We have… the integer.

00:26:33.000 --> 00:26:38.000
Yeah, spring.

00:26:38.000 --> 00:26:44.000
We have the moon. Your address, we have beta.

00:26:44.000 --> 00:26:49.000
Yeah, so these are some of the common types that we will be coming across.

00:26:49.000 --> 00:27:01.000
So anytime you are declaring by interest you don't write integer. The type of annotation for integer is You… I hope you can see my screen.

00:27:01.000 --> 00:27:20.000
Reality uses before, uses U32. And then you if y'all saying this because I have in this extension installed Which is called That's the next thing is in sport.

00:27:20.000 --> 00:27:31.000
Mufries Baga. And there's one called streamove analyzer and this particular one.

00:27:31.000 --> 00:27:38.000
You move and eliza. This will help you to debug your code easily.

00:27:38.000 --> 00:27:43.000
It is how to declare… Braubles move.

00:27:43.000 --> 00:27:49.000
And also, when we declare a variable. Use humor by default.

00:27:49.000 --> 00:27:57.000
Meanwhile, his wife would have declared over him. I cannot go in.

00:27:57.000 --> 00:28:02.000
Anytime I could. I cannot come and declare a number again and see.

00:28:02.000 --> 00:28:07.000
Legs numb. And I'll assign a new number.

00:28:07.000 --> 00:28:12.000
If I try to… It says something like is going to show an error.

00:28:12.000 --> 00:28:22.000
Because by default, it's enough is mutual, meaning I cannot choose If I want to change probably some part somewhere in the book.

00:28:22.000 --> 00:28:49.000
When I'm the client is once. Used to it. Once I add news to it meaning later in the course i i do this is going to be acceptable. By the moment i don't add this usable keyword It's not acceptable.

00:28:49.000 --> 00:28:53.000
Let me declare some. More triplets.

00:28:53.000 --> 00:29:02.000
Lam 2. Because you… Okay.

00:29:02.000 --> 00:29:08.000
And also we have millions So Gulens represents two of us or one or two.

00:29:08.000 --> 00:29:10.000
So probably I say you are right you are right in an application.

00:29:10.000 --> 00:29:15.000
The application you are writing requires you of course to output something.

00:29:15.000 --> 00:29:27.000
So let me see. Private and not private you can assign Boolean value to something like that You need to write something.

00:29:27.000 --> 00:29:31.000
We can jump into the public but with that you can assign a boolean value to you.

00:29:31.000 --> 00:29:42.000
I'll see let's bullion. So let's… Driving.

00:29:42.000 --> 00:29:50.000
Less private beaches. Sequencing tree.

00:29:50.000 --> 00:29:55.000
You get it. And let's public. Probably less.

00:29:55.000 --> 00:30:02.000
Public this is a mood. In our food.

00:30:02.000 --> 00:30:12.000
To declare fuel or force of a value. And also we have the address type and how do we declare address This is how we declare address.

00:30:12.000 --> 00:30:24.000
So we always use a late QS. Yours is the latest keyword to address so let's

00:30:24.000 --> 00:30:29.000
Let's address any receipts the type annotation.

00:30:29.000 --> 00:30:37.000
Release type annotation is what tells the compiler that is a personal data type trying to play.

00:30:37.000 --> 00:30:51.000
Right you see in other languages, they are silenced. In python you can just go ahead and you can just play a number Let's name.

00:30:51.000 --> 00:30:58.000
Because goofy. And probably need to wait. You have to.

00:30:58.000 --> 00:31:05.000
The name is what It's a spring.

00:31:05.000 --> 00:31:13.000
So you always see their type and location.

00:31:13.000 --> 00:31:20.000
And also the next thing we are going to Okay.

00:31:20.000 --> 00:31:32.000
But at least sometimes for some formal numbers like This number, sometimes the Kampala Oh.

00:31:32.000 --> 00:31:38.000
If you skip this. Your compiler is going to assume this as a Boolean.

00:31:38.000 --> 00:31:46.000
Let me see. You are assuming this as a string. The Pumpalized.

00:31:46.000 --> 00:32:01.000
Yes. And same applies to this. Let me see. You skip this and probably your story is you want to store zero as a spain The compiler is automatically used to see this as an easy, yeah.

00:32:01.000 --> 00:32:16.000
I'm clear on this.

00:32:16.000 --> 00:32:20.000
Oh.

00:32:20.000 --> 00:32:25.000
I actually have a question.

00:32:25.000 --> 00:32:26.000
Yeah. Yeah, I can't hear you.

00:32:26.000 --> 00:32:32.000
Hello. Hi, I'm coming.

00:32:32.000 --> 00:32:33.000
I can hear you.

00:32:33.000 --> 00:32:40.000
Hello. Alalayon project.

00:32:40.000 --> 00:32:43.000
Are you asking a question?

00:32:43.000 --> 00:32:52.000
Okay oh yeah well you declared? You just… See, that's something now that and move.

00:32:52.000 --> 00:32:58.000
If you want to declare a variable, you have to like state type.

00:32:58.000 --> 00:32:59.000
Yeah.

00:32:59.000 --> 00:33:05.000
But this one now you said you cancelled the type phone I think it was you 64 that you said before so that is an unsigned int.

00:33:05.000 --> 00:33:07.000
Yeah.

00:33:07.000 --> 00:33:13.000
So now you show how we declare in Python and kind of like compare.

00:33:13.000 --> 00:33:24.000
But for this let number equals zero, is this still right to declare it like this? Because you said it's still going to recognize it as an integer.

00:33:24.000 --> 00:33:25.000
I don't know if you get my question

00:33:25.000 --> 00:33:31.000
No, and I made mention of something. I get your question. And I was like, probably… I try to do something like this.

00:33:31.000 --> 00:33:39.000
But if you in your hair returns. Our parents store it as a spring.

00:33:39.000 --> 00:33:41.000
Okay.

00:33:41.000 --> 00:33:46.000
And probably you forget to see the type allocation that is a string.

00:33:46.000 --> 00:33:51.000
And he just replay this week. Automatically the unbalanced means you see it as a number.

00:33:51.000 --> 00:33:57.000
You get it.

00:33:57.000 --> 00:33:58.000
Bye.

00:33:58.000 --> 00:34:04.000
So if you declare assuming you work to declare that as a string You know stringer is like sequence of characters Right.

00:34:04.000 --> 00:34:06.000
Yeah.

00:34:06.000 --> 00:34:11.000
So if you want to declare it as a string. We do compare a seat like this?

00:34:11.000 --> 00:34:18.000
As a strength because you didn't have any type to it.

00:34:18.000 --> 00:34:20.000
That's the reason why he's always here to get LSI qualification.

00:34:20.000 --> 00:34:24.000
Okay. Oh, okay, okay.

00:34:24.000 --> 00:34:39.000
Probably in your head, you're assuming something. But I'm going to tell you that's how importantly if you and don't do it the first week I was just pressing on the number because that's how they compile it into C.

00:34:39.000 --> 00:34:44.000
But it is always better to add a type allocation to miss.

00:34:44.000 --> 00:34:47.000
Okay, I get it now. Thank you.

00:34:47.000 --> 00:34:56.000
And for our assignment. So let me see.

00:34:56.000 --> 00:35:05.000
I'm just verbal now. Because I've added these major somewhere in the food i can reassigned Lama to a different number.

00:35:05.000 --> 00:35:19.000
Over here. Nama is you… And I'm storing i'm using number Anyway, I'm going to get the house 65.

00:35:19.000 --> 00:35:29.000
Because I didn't use, meaning I can reassign a different So I can just sit in my food chest wall.

00:35:29.000 --> 00:35:34.000
I see now This is going to work.

00:35:34.000 --> 00:35:46.000
Because the compiler reached baseline before here. Because there's mutable over here. Okay, he's trying to change Online 55.

00:35:46.000 --> 00:36:06.000
10 now. So anytime you are creating a variable and you know that you really assign a You're supposed to add the neutral keyword to it.

00:36:06.000 --> 00:36:07.000
I can…

00:36:07.000 --> 00:36:17.000
I have a question. Can you hear me? Okay, so I believe the U-H is on sine integer that would be for positive numbers. Am I right, Kevin?

00:36:17.000 --> 00:36:20.000
Yeah, yeah, it's only positive numbers. Don't need this numbers.

00:36:20.000 --> 00:36:25.000
Okay, so how do you also store negative numbers?

00:36:25.000 --> 00:36:29.000
I would say it's not possible. You don't store any numbers.

00:36:29.000 --> 00:36:37.000
It's even wrap around, test your food and there's a negative food, your food will break.

00:36:37.000 --> 00:36:38.000
Let me say it to you. So I have a quick note.

00:36:38.000 --> 00:36:50.000
Okay. Okay.

00:36:50.000 --> 00:36:55.000
This is subtraction. And subtracting.

00:36:55.000 --> 00:37:04.000
A and B, right? So I'm going to input CUDA is going to give us a negative number and test it.

00:37:04.000 --> 00:37:10.000
Their code will break. The name of the function is applied in the trees.

00:37:10.000 --> 00:37:16.000
I'll come over here. I've tried entries. I'm going to make the eh?

00:37:16.000 --> 00:37:20.000
I went to make the… Cool.

00:37:20.000 --> 00:37:28.000
And civics.

00:37:28.000 --> 00:37:33.000
Does add.

00:37:33.000 --> 00:37:38.000
Then it's three.

00:37:38.000 --> 00:37:43.000
Yes. They see that quota is broken, right? You can see it here It doesn't work for me.

00:37:43.000 --> 00:37:48.000
Yeah, it reminds me. There's only 10 arrow.

00:37:48.000 --> 00:37:50.000
Okay.

00:37:50.000 --> 00:37:54.000
Hello.

00:37:54.000 --> 00:38:02.000
By the moment I missed this number, I've made it to one And I run the food.

00:38:02.000 --> 00:38:08.000
Iran is good.

00:38:08.000 --> 00:38:12.000
To work now. Recent aspect now.

00:38:12.000 --> 00:38:13.000
Yeah, it's West Pacific India.

00:38:13.000 --> 00:38:21.000
Bye.

00:38:21.000 --> 00:38:25.000
Okay, I'll move on. Come on, right?

00:38:25.000 --> 00:38:29.000
Yes, please. Yes, please.

00:38:29.000 --> 00:38:36.000
Yes, and what I did was Vao and declaration and all VARO is a container for storing stuff.

00:38:36.000 --> 00:38:57.000
So anytime I declare any Bible. You always start with the next year And the name of the Bible and the Bible, and the value you are assigned to the That's how it works. And anytime you want to You always have to add a meter with you.

00:38:57.000 --> 00:39:04.000
I'm moving to some basic and control through the remote language.

00:39:04.000 --> 00:39:13.000
So I'm going to create some arithmetic information So we are going to create a declares and variables.

00:39:13.000 --> 00:39:15.000
Let's go down. Let's repeat.

00:39:15.000 --> 00:39:19.000
Hello. Yeah, please.

00:39:19.000 --> 00:39:21.000
Yeah, I can hear.

00:39:21.000 --> 00:39:27.000
You did not talk about the vector UA.

00:39:27.000 --> 00:39:30.000
Let me tell you it. It's an IRA.

00:39:30.000 --> 00:39:33.000
Yes, please. Okay.

00:39:33.000 --> 00:39:34.000
And it's also used for springs so in move we don't have springs move without strings.

00:39:34.000 --> 00:39:35.000
Yes.

00:39:35.000 --> 00:39:39.000
Okay.

00:39:39.000 --> 00:39:40.000
Like how are not program language you can just request things before move this we don't have springs.

00:39:40.000 --> 00:39:44.000
Yes.

00:39:44.000 --> 00:39:45.000
Yep.

00:39:45.000 --> 00:39:58.000
You have to enforce things and probably we pass to it You know, so sometimes we use a vector it But this winter by your son Harry move.

00:39:58.000 --> 00:39:59.000
So how is we use iris? Another program language. That's all examines.

00:39:59.000 --> 00:40:08.000
Okay.

00:40:08.000 --> 00:40:13.000
So, hello, sorry, I have a question.

00:40:13.000 --> 00:40:15.000
Okay.

00:40:15.000 --> 00:40:24.000
Yeah, I'm listening.

00:40:24.000 --> 00:40:25.000
Thank you.

00:40:25.000 --> 00:40:40.000
I am. Okay, so the way we declared we assigned So, you know, let's mute number we know this is an integer already. So what we want to display a string in We've replaced U8 with vector you is, right? Then we are assigned maybe like

00:40:40.000 --> 00:40:41.000
Yes.

00:40:41.000 --> 00:40:53.000
Maybe the essay once declare. Iname is a strength. So let's declare a name and everything. And we assign So instead of the U8, we are going to use vector of V.

00:40:53.000 --> 00:40:58.000
With all you ate. To declare, I do get it.

00:40:58.000 --> 00:41:02.000
I hope you guys explain it to the person, right? I'm going with your question.

00:41:02.000 --> 00:41:05.000
No, I'm trying to like…

00:41:05.000 --> 00:41:08.000
Ask me a question.

00:41:08.000 --> 00:41:21.000
Okay. I wanted to go back to the code that you place that you declared the variable also figured out something Okay, yeah.

00:41:21.000 --> 00:41:40.000
The place you said variable reassignment. Okay, let's say you want to declare a string You want to declare his dream. So HISA, we are going to replace So we're not going to use string. Where U8 was used to declare the integer

00:41:40.000 --> 00:41:41.000
So… Okay.

00:41:41.000 --> 00:41:46.000
Yeah, yeah, yeah, exactly. You pass and… Yeah.

00:41:46.000 --> 00:41:47.000
And this is because you see um The first thing, okay.

00:41:47.000 --> 00:41:54.000
Stop.

00:41:54.000 --> 00:42:03.000
Someone is making us.

00:42:03.000 --> 00:42:21.000
Anyone sports? Especially making them lose.

00:42:21.000 --> 00:42:27.000
Young Elliot.

00:42:27.000 --> 00:42:36.000
Nine. Young.

00:42:36.000 --> 00:42:42.000
Yeah, I think… Yeah, please do your answer. Please ask your questions.

00:42:42.000 --> 00:42:43.000
Agriculture. Yeah, for us.

00:42:43.000 --> 00:42:44.000
Thank you.

00:42:44.000 --> 00:42:50.000
Okay, okay. Lion, I just wanted to highlight on the string part I don't know much about the MOOC language, but I'm coming from a rust background.

00:42:50.000 --> 00:42:54.000
Yeah.

00:42:54.000 --> 00:43:02.000
So I think that the reason why the MOOC language is not having the string um Data senses that.

00:43:02.000 --> 00:43:10.000
Probably is to make it fast. Because on the computational background, like after it's been done in binary.

00:43:10.000 --> 00:43:28.000
As we're telling Rust and other ones, prints and messages become very, very, very, very expensive So even in Solana, even if they have to use string, they change it to use a data set called message of which they do that through Vectex. So I think that's why it makes me very, very, very fast.

00:43:28.000 --> 00:43:36.000
To avoid the string and confrontational charges, it has to use public vectors.

00:43:36.000 --> 00:43:43.000
All right. So, and… This is good. So anytime you want to use them.

00:43:43.000 --> 00:43:47.000
The importance from the standard library book you are seeing this line, right?

00:43:47.000 --> 00:43:49.000
Hello. My heart is even penny.

00:43:49.000 --> 00:43:52.000
Yeah, hello. Oh yeah i thought i mentioned earlier, guys, you never thought.

00:43:52.000 --> 00:43:58.000
So…

00:43:58.000 --> 00:44:09.000
Oh, okay. So my question is um do we always have to assign assign when you are initializing a very variable.

00:44:09.000 --> 00:44:11.000
That's a type annotation, right? Yeah, yeah.

00:44:11.000 --> 00:44:31.000
Yeah, like when, let's see. Signing, not a type, but then when you are signing, I see you always assign to maybe zero, like a number to zero Can you do one without having like zero day without assigning anything to it and then probably

00:44:31.000 --> 00:44:34.000
And use the metabol to change it later on.

00:44:34.000 --> 00:44:44.000
Yeah, you can't do that.

00:44:44.000 --> 00:44:53.000
Actually, I've not got into Spain, but because you're asking I want to see how you do it.

00:44:53.000 --> 00:44:59.000
So yes, anytime you want to use, you have to import is from the standard library.

00:44:59.000 --> 00:45:08.000
You can't pass it through via a screen. But the moment you are trying to create this data type.

00:45:08.000 --> 00:45:11.000
What we've done is we've just created a custom data type.

00:45:11.000 --> 00:45:26.000
By the moment we want to make it a little less let's this let's charity register equal to this And when we get here, we can pass vector U8.26.

00:45:26.000 --> 00:45:27.000
If…

00:45:27.000 --> 00:45:34.000
Let me finish it.

00:45:34.000 --> 00:45:40.000
You evaluate value.

00:45:40.000 --> 00:45:41.000
Okay. All right. Thank you.

00:45:41.000 --> 00:45:47.000
Yes, that's how it works.

00:45:47.000 --> 00:45:54.000
Okay.

00:45:54.000 --> 00:46:01.000
So I wanted to ask to bring you something on the arithmetic information.

00:46:01.000 --> 00:46:13.000
So we have the sound. And we have a difference we have the products the cushions And Reminda.

00:46:13.000 --> 00:46:28.000
So once we are seen over, yes. And the difference between But anytime you're finding the difference between smooth variables

00:46:28.000 --> 00:46:42.000
Anytime you're finding the difference between small and best you see over here i'm just making it straightforward but let's say in your food we have you have and let's

00:46:42.000 --> 00:46:46.000
Nam 1. Is usually equal to five.

00:46:46.000 --> 00:46:53.000
And I'm sweet. You 32, right?

00:46:53.000 --> 00:47:02.000
You cannot come in and cannot come in something like that that you are storing And resort is supposed to be Naman plus NAM3.

00:47:02.000 --> 00:47:14.000
Why do you think it's not going to support anyone's one satisfaction?

00:47:14.000 --> 00:47:15.000
Anyone who said white yeah i can why you think it's not going to work?

00:47:15.000 --> 00:47:19.000
Thank you again.

00:47:19.000 --> 00:47:22.000
Wouldn't need different data types?

00:47:22.000 --> 00:47:23.000
I think because it would be different.

00:47:23.000 --> 00:47:24.000
It's actually…

00:47:24.000 --> 00:47:25.000
I'm thinking it's a size. The different size.

00:47:25.000 --> 00:47:32.000
Okay, maybe that's what I was about to say. Maybe because of different

00:47:32.000 --> 00:47:33.000
Okay.

00:47:33.000 --> 00:47:40.000
Yeah, exactly. So because of the difference the size of the you can try to do something like this. The compiler is going to throw an arrow.

00:47:40.000 --> 00:47:46.000
So I can't do a demo from here. So you see over here.

00:47:46.000 --> 00:47:53.000
And I'm retaining uses for right Let me try retaining you.

00:47:53.000 --> 00:48:06.000
Thank you, too. And you see, it's already showing an error, invalid return Because they're giving values 64.

00:48:06.000 --> 00:48:24.000
This is before. So meaning you are supposed to go and change utility before the weekend is going to work. Hope you understand what I've made over here. It doesn't work.

00:48:24.000 --> 00:48:47.000
You always have to make sure that it's out of the same You make a difference between them your food is going to crack.

00:48:47.000 --> 00:48:53.000
And now when it comes to comparison of breaches. These are the arithmetic operations.

00:48:53.000 --> 00:49:15.000
To arrange it. Questions. What if the answer is for addition is for difference. The asterisk over here is for product it is the multiplication And this one is for the slash fire is for potion which is condition and if you do 10, we'll do three is going to return one

00:49:15.000 --> 00:49:21.000
The remainder of the application. We fight with him would be three.

00:49:21.000 --> 00:49:27.000
Three questions between that one. Once you are the answer.

00:49:27.000 --> 00:49:37.000
Which is it. Now, let's go on.

00:49:37.000 --> 00:50:01.000
What you call comparison of bridges.

00:50:01.000 --> 00:50:10.000
Like right in your area. When we are trying to check whether screen members are equal So in your code, you have mood.

00:50:10.000 --> 00:50:15.000
This retaining boot you are checking whether lamb one and lamb 2 are equal.

00:50:15.000 --> 00:50:30.000
If not one and I'm freeze before. The moon is going to return to me to us and if number one It's no equal to If number one is equal to lamb.

00:50:30.000 --> 00:50:37.000
And will eventually retain false. If Lam 1 is better than lamb 2, the moon is going to return.

00:50:37.000 --> 00:50:41.000
5 dan one is less than There will be retained force.

00:50:41.000 --> 00:50:52.000
We basically are and comprising of recent west It always returns to your course based on the statement So we usually have a greater than equals when Yes, only equal to two.

00:50:52.000 --> 00:51:05.000
Yes, we have that. As a comprising of prison.

00:51:05.000 --> 00:51:12.000
And I am going to focus on logical operators.

00:51:12.000 --> 00:51:19.000
No idea. The ID is smart, sir.

00:51:19.000 --> 00:51:26.000
Let's in my list.

00:51:26.000 --> 00:51:41.000
So if you talk about logical operation and anyone who have done and If you understand and if you've done zeros and ones or probably how do we call it ima mas course.

00:51:41.000 --> 00:51:42.000
Yeah, if we're looking at anyone that much. Yeah, she's stable. Yay.

00:51:42.000 --> 00:51:45.000
True taboo.

00:51:45.000 --> 00:51:51.000
One and one is going to retain one, right? 1 and 0 is going to retain zero.

00:51:51.000 --> 00:51:55.000
A, four.

00:51:55.000 --> 00:51:56.000
That's all. Of course.

00:51:56.000 --> 00:52:04.000
It is going to be true. Exactly. So it's always going to be true That's when I'm doing the end operation.

00:52:04.000 --> 00:52:10.000
The end of question is always free. So the first one is the end equation.

00:52:10.000 --> 00:52:20.000
So… the and increasing Caprita.

00:52:20.000 --> 00:52:25.000
Is always True.

00:52:25.000 --> 00:52:30.000
If move If more values are true.

00:52:30.000 --> 00:52:36.000
Yeah, we've moved. The endocrine retention.

00:52:36.000 --> 00:52:43.000
But it's going to return for us if If one of them is forced.

00:52:43.000 --> 00:52:50.000
Let me see if I'm doing two and through three and four you need to retain force for me.

00:52:50.000 --> 00:52:55.000
But true or false begin to return to. At least they're all operator.

00:52:55.000 --> 00:53:05.000
So this is all. Barriers in this or Three or fours is always going to return three.

00:53:05.000 --> 00:53:16.000
And not seeing… want to return the negation of And delegation of North C is what is forced.

00:53:16.000 --> 00:53:26.000
And this is the XO. Greater.

00:53:26.000 --> 00:53:38.000
So now let's go to the if all statements.

00:53:38.000 --> 00:53:48.000
So if it is one of the most important stuff in systems Most of the systems that we are seeing are work a lot of if else.

00:53:48.000 --> 00:54:07.000
Let's see. And like how let me use an example like a traffic light which uses a timer If the time is between this and this probably Would you agree. After some time moved to red At that time moved in yellow. At that time moved to

00:54:07.000 --> 00:54:13.000
Green so that's what it basically just checking time.

00:54:13.000 --> 00:54:22.000
If number one is greater than number three. Probably tene compared oh And yeah.

00:54:22.000 --> 00:54:30.000
The user number one. If Lam 1 is less than three.

00:54:30.000 --> 00:54:39.000
The user that Nam 2 is better. Oh, so… Yeah, use that user are equal.

00:54:39.000 --> 00:54:47.000
I think that's how each of us can work. Probably I'll pass a number which is our pass number one is four And number two is theory.

00:54:47.000 --> 00:54:54.000
The moment I pass it, the compiler is going to do an else check So if, yeah, it's four and here is three.

00:54:54.000 --> 00:55:04.000
Meaning if all is data entry so if all four is greater than three meaning this particular block of food is going to work for me.

00:55:04.000 --> 00:55:10.000
Is good. But if for If the number here is less than the number here.

00:55:10.000 --> 00:55:12.000
I am going to get this block of

00:55:12.000 --> 00:55:23.000
I'm going to get this blocker. Group and click.

00:55:23.000 --> 00:55:25.000
I hope I'm clear by you.

00:55:25.000 --> 00:55:41.000
Yes.

00:55:41.000 --> 00:55:53.000
Am I breaking? Someone is saying I am breaking.

00:55:53.000 --> 00:56:02.000
Please, if you have a question and don't send it to my gm Just send it to the chat box so that I can read it then.

00:56:02.000 --> 00:56:11.000
Everyone coming to you. Just type it over here instead of standing next to my ear.

00:56:11.000 --> 00:56:17.000
All right.

00:56:17.000 --> 00:56:23.000
Now you will go to wildlife.

00:56:23.000 --> 00:56:33.000
Yes, prediction of money. So if you talk about, basically let me use a game like his game that's some way that you always think.

00:56:33.000 --> 00:56:43.000
It's inefflerable. So it's just going. The code is going to run onto a certain condition is met.

00:56:43.000 --> 00:56:47.000
So sir when you are playing saui? You keep going on so it hits something.

00:56:47.000 --> 00:56:55.000
As you will look something like that. Their code will keep running through that condition is made.

00:56:55.000 --> 00:57:04.000
You've declared i is because i is metamu over here.

00:57:04.000 --> 00:57:13.000
You can keep running different values of i to the zero.

00:57:13.000 --> 00:57:18.000
So what you are saying is like, if I is less than 10, do something.

00:57:18.000 --> 00:57:30.000
So because if i show is less than 10. The code is going to keep running. So I is equal to Well, of course, the ice equal to 10 people stopped.

00:57:30.000 --> 00:57:33.000
But I couldn't keep running once i is less than 10.

00:57:33.000 --> 00:57:40.000
This policy is going to run It went from 1, 2, 3, 4, 5, 6, 7, 8, 9.

00:57:40.000 --> 00:57:47.000
10. When it runs 10? And it sees that 10 is no less than 10, 10 is brick.

00:57:47.000 --> 00:57:56.000
So that works. Which refers run the first one i which is zero.

00:57:56.000 --> 00:58:06.000
Zero is less than 10. Retain zero by here. If you count zero plus one.

00:58:06.000 --> 00:58:13.000
It's kind of zero plus one. Then zero plus one is now going to Z plus one. Then the code will come back to you by here.

00:58:13.000 --> 00:58:19.000
One is less than 10. Because one is less than 10, if you come over here, now I respond.

00:58:19.000 --> 00:58:28.000
And I recount one. Then it will come a run of one plus one it's going to run again because 2 is less than 10.

00:58:28.000 --> 00:58:32.000
They could come back and come around three plus one. It's not going to get there.

00:58:32.000 --> 00:58:37.000
If you keep running to Okay, sir.

00:58:37.000 --> 00:58:49.000
If you keep running it with 10 plus 1. The only way to get to 10 plus 1 their code is going to stop. It will be stopped at 9 plus 1.

00:58:49.000 --> 00:58:54.000
9 plus 1 is 10, then it brings 10 over here.

00:58:54.000 --> 00:59:05.000
And because 10 is not less than 10 So hope you understand how our loop works.

00:59:05.000 --> 00:59:06.000
Okay, benefits.

00:59:06.000 --> 00:59:13.000
Wait, so I wasn't answering the question. As of the way it is not.

00:59:13.000 --> 00:59:31.000
Plus one. Let's say it is plus two. And when it gets to So, you know, when it gets So, you know, let's say it is plus three.

00:59:31.000 --> 00:59:32.000
Okay.

00:59:32.000 --> 00:59:40.000
So when we say 1 plus 3, then maybe when you get to six plus three and nine You know, it doesn't attend to particular non-baires so we do nine close to you again. It's… like acid loop and move to 11 so

00:59:40.000 --> 00:59:44.000
We did lose top, we didn't give information to look like that or it should just stop at then Right.

00:59:44.000 --> 00:59:49.000
No. Yay. It is so great.

00:59:49.000 --> 00:59:56.000
Because if you get in line, nine plus three And so it's no less than 10, right?

00:59:56.000 --> 00:59:57.000
Yes.

00:59:57.000 --> 01:00:06.000
What is data dancing, right? The code is great at Since last day.

01:00:06.000 --> 01:00:10.000
Okay, so it's a stop at 9. It will exceed the loop to 11.

01:00:10.000 --> 01:00:16.000
Let's do that. This is what he's trying to say. Instead of twin eye plus i mean iOS 3.

01:00:16.000 --> 01:00:21.000
So I is going to start from zero. And it's going to check zero less than 10.

01:00:21.000 --> 01:00:27.000
So because there is less than 10, Zara will come over and Zero Perry.

01:00:27.000 --> 01:00:33.000
Do you agree to get zero Three.

01:00:33.000 --> 01:00:42.000
As office includes when the plateau runs. Because 3 is less than 10.

01:00:42.000 --> 01:00:50.000
The next is going to be Two, eight, three.

01:00:50.000 --> 01:00:55.000
Very plaster. It used to be three plus three.

01:00:55.000 --> 01:01:03.000
Is less than 10. Process is less than 10 days to come and run the fully generously.

01:01:03.000 --> 01:01:12.000
And because A plus three And because nine is less than 10, you could come back to come and run again at nine plus three.

01:01:12.000 --> 01:01:21.000
The weather could run from lion plaster. There could be considered Lime plus berry and is greater than 10 and it's not less than 10.

01:01:21.000 --> 01:01:30.000
You get that answer. They could abort at which is mine.

01:01:30.000 --> 01:01:37.000
It's great to hear you now.

01:01:37.000 --> 01:01:38.000
Okay, it's clear.

01:01:38.000 --> 01:01:47.000
I did the same thing for other including for loop and everything. That's the same thing for them

01:01:47.000 --> 01:01:50.000
For leukesietic condition.

01:01:50.000 --> 01:01:52.000
Okay.

01:01:52.000 --> 01:02:00.000
So let's say for example, something. So for this in zero to 10, do something.

01:02:00.000 --> 01:02:08.000
So let me see if I'm running a loop and for one and for this for i 0 to 10.

01:02:08.000 --> 01:02:20.000
Ui plus one so for four look if i'm if it was for i'm doing It's also going to run but for full look, you run for loop when you know like the type of condition you want to meet.

01:02:20.000 --> 01:02:30.000
It's like, you know what you want to achieve. That's important figures I'm trying to see.

01:02:30.000 --> 01:02:32.000
Okay.

01:02:32.000 --> 01:02:39.000
So it's running until that.

01:02:39.000 --> 01:02:53.000
All right.

01:02:53.000 --> 01:02:56.000
We are going to move to functions.

01:02:56.000 --> 01:03:04.000
So what do other numbers ranging from?

01:03:04.000 --> 01:03:09.000
I can't hear you well.

01:03:09.000 --> 01:03:20.000
I said, what if I'm using numbers from you from probably Are we going to use the same method?

01:03:20.000 --> 01:03:25.000
Yeah, it's the same method for everything. This is just a scenario.

01:03:25.000 --> 01:03:26.000
And it's not always going to be numbers. Therefore, look, yeah.

01:03:26.000 --> 01:03:34.000
I mean, before.

01:03:34.000 --> 01:03:35.000
Is this your question again. Yeah.

01:03:35.000 --> 01:03:38.000
Can you hear me?

01:03:38.000 --> 01:03:39.000
Thank you. Let me talk.

01:03:39.000 --> 01:03:44.000
Yeah, please you can go with your question.

01:03:44.000 --> 01:03:49.000
No, go on with your question if you can hear me, go on with your question.

01:03:49.000 --> 01:04:00.000
Yeah, I asked the question that if probably I'm using before in the write this follow up. And I'm trying to use a maybe number ranging from the 12 to 40.

01:04:00.000 --> 01:04:10.000
Am I going to use this same method you use here? I just need to dip it on and add two periods and i'm in the dot and the end diamond right

01:04:10.000 --> 01:04:18.000
No, no, no. Okay, I get it. You don't use dot. Yeah, dot is not our house.

01:04:18.000 --> 01:04:24.000
Runful.

01:04:24.000 --> 01:04:29.000
We get it and we also have bricks and continuum. Some of the stuff um

01:04:29.000 --> 01:04:42.000
There are two dots between zero.

01:04:42.000 --> 01:04:49.000
Are you talking about the whole loop?

01:04:49.000 --> 01:04:56.000
Hello, can you type your question in the chat box?

01:04:56.000 --> 01:05:04.000
I think you were talking about the follow.

01:05:04.000 --> 01:05:11.000
Yeah.

01:05:11.000 --> 01:05:29.000
Is it like you want an example for the world. I don't understand what he's trying to say.

01:05:29.000 --> 01:05:34.000
Z out.

01:05:34.000 --> 01:05:35.000
I think we can't get any. You're on mute yourself.

01:05:35.000 --> 01:05:50.000
He's muted.

01:05:50.000 --> 01:06:03.000
I think she's having a… challenges.

01:06:03.000 --> 01:06:10.000
Yeah, I'm going to read it.

01:06:10.000 --> 01:06:24.000
No, no, you don't need to use that lot. What I'm doing is more it's more like I'm just using How do you call it? Comments to explain stuff geology council What is your question.

01:06:24.000 --> 01:06:42.000
All right. So I want like… Let's see i want to see this function to give me a return your age is less than… let's say if you are eating and below this and then it went 18 and above which one is above

01:06:42.000 --> 01:06:47.000
Appropriate is it there while loop or the for loop.

01:06:47.000 --> 01:06:51.000
East Coast. Probably you saw it as a variable.

01:06:51.000 --> 01:06:54.000
Oh, okay.

01:06:54.000 --> 01:07:01.000
So… Let me see.

01:07:01.000 --> 01:07:06.000
Let's… Yes.

01:07:06.000 --> 01:07:15.000
It is a new this sequence, right?

01:07:15.000 --> 01:07:27.000
So with this, it's better to use the equals. If your age is greater than 80, then we are going to return to all those else we are going to return false negatives.

01:07:27.000 --> 01:07:41.000
It's better to use details for that one. You get me.

01:07:41.000 --> 01:07:47.000
So I'm going to find you. Before I go to Francine, any other question.

01:07:47.000 --> 01:08:05.000
Yes, please. A question here. Like in the move language, how do you run code? For example, if we take a Python, there's something, we can use the print command Java, we can use S-O-U-T in MOOC. How do we go about that?

01:08:05.000 --> 01:08:08.000
Yeah, so… Use the egg.

01:08:08.000 --> 01:08:21.000
If you start writing most ads. You will not really use it if you're writing a whole lot of code It's better just write this test for your food.

01:08:21.000 --> 01:08:32.000
And you cannot run code like you like normal fight where you can't just move we just So if you come over, you know.

01:08:32.000 --> 01:08:43.000
Early days now. So is it in Ibak?

01:08:43.000 --> 01:08:46.000
But you also see the ibag, right? Yes, with these words we can use to print.

01:08:46.000 --> 01:08:50.000
Yes.

01:08:50.000 --> 01:09:00.000
Our challenge is for uh it's for testing you can't run it as a normal code. It's going to break down. You're supposed to run it as a test.

01:09:00.000 --> 01:09:04.000
Yeah, I suppose you write test for your food, then you do it.

01:09:04.000 --> 01:09:12.000
Before you can't rinse your food. So probably tomorrow we will do something like that.

01:09:12.000 --> 01:09:28.000
But if you are writing a complex application. When you're writing your test and you're passing these kind of stuff you see that your code is going to be some kind of way of working so you ignore it all These are writing smart contract. The best way to write space for your food. Make sure the taste are perfect.

01:09:28.000 --> 01:09:39.000
So that's the reason why always very necessary to write this for a smart contract For smart contract languages do not really have that transformation, how it works easily in our other foods like that.

01:09:39.000 --> 01:09:52.000
I think unless you're using the equipment or something but before you can rent the Really with this one.

01:09:52.000 --> 01:09:55.000
If I try to do this, if I try to use the food.

01:09:55.000 --> 01:10:07.000
You see with this one it has printed the image this is how it's printed it Printed with some It's not normal like how we see it in our normal front-end food. These are expensive.

01:10:07.000 --> 01:10:14.000
So you see app, bank, bank, bank. Yeah, I see.

01:10:14.000 --> 01:10:23.000
I know. So if I try to build this book. Grabbing through an arrow.

01:10:23.000 --> 01:10:36.000
Telling me I'm no busy user. Okay, I didn't after I did it.

01:10:36.000 --> 01:10:47.000
Yeah. Sometimes it's even tell you that you're not making use of

01:10:47.000 --> 01:10:50.000
So if you just run the code like this, you know.

01:10:50.000 --> 01:11:00.000
I know we're going to get any outstanding. You only get an output when you make an error in your post like If I make an error by making it you get it too.

01:11:00.000 --> 01:11:08.000
Let me leave you this. That's the only thing that Kampala is going to tell me that I've made an error.

01:11:08.000 --> 01:11:14.000
It's either I put errors to you or warnings to you.

01:11:14.000 --> 01:11:26.000
Or the compiler data. So if you want to get output I was supposed to be right there's for your food so that one use it.

01:11:26.000 --> 01:11:31.000
Yes, come on. Yes, Kumar.

01:11:31.000 --> 01:11:40.000
I can't get out. You know, like our normal actually basically what you see It is Resort 1.

01:11:40.000 --> 01:11:46.000
In another language. Visualize resource one.

01:11:46.000 --> 01:11:56.000
And it also comes with this, right? These are three and also it's just going to be baggage is in strange houses.

01:11:56.000 --> 01:12:04.000
And if you are writing a book you contract you're not interested in this stuff. You'll just be interested in writing letters to pass.

01:12:04.000 --> 01:12:08.000
Because even if you make a mistake in the test, the food we are most, if I'm not printing.

01:12:08.000 --> 01:12:11.000
Can I make a mistake in my test, the code or what?

01:12:11.000 --> 01:12:24.000
They play similar round.

01:12:24.000 --> 01:12:32.000
Any other questions? You can ask your question.

01:12:32.000 --> 01:12:38.000
Hello, I want to wrap up.

01:12:38.000 --> 01:12:42.000
Wow, I can't finish everything together. I can't finish everything.

01:12:42.000 --> 01:12:48.000
You.

01:12:48.000 --> 01:13:02.000
Oh, okay, okay. So… Our last thing is functions and what are functions It's a package for it.

01:13:02.000 --> 01:13:11.000
So for instance, the function of features is a feature so whatever you are doing today runs across every language that you need.

01:13:11.000 --> 01:13:18.000
Any language you're going to miss details over there. Their while loops.

01:13:18.000 --> 01:13:25.000
And verbal declaration and stuff whatever you also meet functions in any language that you pass to.

01:13:25.000 --> 01:13:45.000
Across languages. Yes, it functions and offers me write a specific food And we can use it multiple times instead of rewriting it. We just like and you see this and it is good.

01:13:45.000 --> 01:13:51.000
You have a fun scene. And this machine is always art smoothies.

01:13:51.000 --> 01:13:59.000
We probably now could look we don't always want it writing yet because 1 is equal to A plus V, next result 2 is equal to C plus V.

01:13:59.000 --> 01:14:11.000
Absolutely. Probably I've been making many additions. So instead of as writing always creating so many You can just write one passion.

01:14:11.000 --> 01:14:19.000
Anytime I fall. I've got these art fish and i passed it's always been to art.

01:14:19.000 --> 01:14:25.000
If iPhone is at least 10 times its number, she will be give me the output of the addition of the numbers.

01:14:25.000 --> 01:14:38.000
Instead of always declaring variables and manually doing the addition. Hope you understand how function works.

01:14:38.000 --> 01:14:46.000
Yeah like like this is one of the most important steps to move Well, fashion agrees.

01:14:46.000 --> 01:14:51.000
Api for your front end. Your phone 10 is always going to call functions in your code.

01:14:51.000 --> 01:14:56.000
Is one of the most important things you need to understand. You can't write smart contracts.

01:14:56.000 --> 01:15:04.000
Act as the API to your content. My friend always qualifies me to work. It's always quite a fancy for me to work.

01:15:04.000 --> 01:15:21.000
If I see function is a block of wood. Which can be called multiple times like instead of four it's like a revisible let me think like if a reasonable block of food, which we can call multiple times So you see we have add entries over here right

01:15:21.000 --> 01:15:27.000
Finish our entries, I can call our entries again.

01:15:27.000 --> 01:15:34.000
Relates. Probably result four.

01:15:34.000 --> 01:15:39.000
Results for

01:15:39.000 --> 01:16:09.000
It's your question.

01:16:10.000 --> 01:16:18.000
I'm calling Resort 5, right? Hundred and two hundred spikes.

01:16:18.000 --> 01:16:23.000
Hope you are seeing this book.

01:16:23.000 --> 01:16:28.000
I just need our food. Resort 5.

01:16:28.000 --> 01:16:29.000
Am I audible? Yes, we're not five, yeah.

01:16:29.000 --> 01:16:31.000
Yeah, isn't that?

01:16:31.000 --> 01:16:33.000
Yes.

01:16:33.000 --> 01:16:50.000
I'm passing 100 and 200. Now also have results one which is i'm i'm calling the same function Let me… mail is out.

01:16:50.000 --> 01:16:56.000
We are now focusing on just the addition. Let's create another addition.

01:16:56.000 --> 01:17:02.000
Relax. These are six.

01:17:02.000 --> 01:17:09.000
Then. Let's ask these comments.

01:17:09.000 --> 01:17:14.000
And let's… Result 7.

01:17:14.000 --> 01:17:20.000
Then let's resol it. Inlet Resort Line.

01:17:20.000 --> 01:17:26.000
Resort 114. 17, 18, 1920.

01:17:26.000 --> 01:17:31.000
You see, I'm just calling just one function operating over there.

01:17:31.000 --> 01:17:39.000
And all I'm doing is just passing numbers for you A and B, A and B, A and B, A of your currency is right.

01:17:39.000 --> 01:17:48.000
All means passing A and B to me. The error is because they are not making use of it.

01:17:48.000 --> 01:17:59.000
It's absolutely easy.

01:17:59.000 --> 01:18:09.000
Yes, we know all the errors should go. I've just created one block of food this is That's good.

01:18:09.000 --> 01:18:13.000
I've been able to pull just that one food multiple times over here.

01:18:13.000 --> 01:18:19.000
If I run my food. Let me see this.

01:18:19.000 --> 01:18:30.000
If I…

01:18:30.000 --> 01:18:41.000
If I tell this good. She is giving me all the outputs.

01:18:41.000 --> 01:18:58.000
But I didn't manually Instead of we need manual which is i'll always be creating different variables now create and let's results one 67 plus 8.

01:18:58.000 --> 01:19:05.000
This is 9 plus 10. Instead of creating different stuff, I just have one.

01:19:05.000 --> 01:19:14.000
I just have one and On all these machines, we just add in any Yes, I promise you.

01:19:14.000 --> 01:19:21.000
So I need to suggest policy. Once I follow it. Addition of that. So that's how function works.

01:19:21.000 --> 01:19:38.000
So you just run, write one line of code. You just find some lines of food means you can reuse me of course any point in time so sometimes we have some getters function You great advice. In that fashion.

01:19:38.000 --> 01:19:44.000
Let me use this food. Let's say over here.

01:19:44.000 --> 01:19:49.000
We will always create a charity. You always register a charity.

01:19:49.000 --> 01:19:58.000
So once we register the charity. Instead of me always creating, let me see, I always create a new name a new description and always… Perfect.

01:19:58.000 --> 01:20:04.000
Good luck.

01:20:04.000 --> 01:20:05.000
Yeah, I think you're breaking Is it from my end.

01:20:05.000 --> 01:20:11.000
Yeah, yes, sir.

01:20:11.000 --> 01:20:13.000
Am I breaking?

01:20:13.000 --> 01:20:14.000
No, you are okay. I just had to continue.

01:20:14.000 --> 01:20:19.000
Yeah, I don't know. You're breaking. And maybe it's from my end.

01:20:19.000 --> 01:20:25.000
Okay. These guys who have this function release person is registered charity.

01:20:25.000 --> 01:20:36.000
So in the front end the front end is going to call this registered charity And if the front end calls this registered charity What's the user identity is the link in the description.

01:20:36.000 --> 01:20:52.000
The name of the charity. And the purpose of their charity so this is what the front end is going to see So if 10 people call me 10 people can call is In just this one line of code. Instead of repeating this line of code for

01:20:52.000 --> 01:21:00.000
10 different people. I just have this function and this function place people can call this function. It's basically giving them the same output.

01:21:00.000 --> 01:21:14.000
Hopefully you understand how function works.

01:21:14.000 --> 01:21:22.000
Have you Googled how function works? Like I said, the code is just everything is just going to be of fun it's fine.

01:21:22.000 --> 01:21:26.000
Most of the staff you are going to meet is just fine soon.

01:21:26.000 --> 01:21:31.000
Where we've gotten to is the most important part of it.

01:21:31.000 --> 01:21:41.000
We need to understand how function works. Let me… Anyone who comes voluntarily explain questions to me.

01:21:41.000 --> 01:21:44.000
If not, I'll just wrap up on it.

01:21:44.000 --> 01:21:46.000
Lion, I wanted to… add a contribution was a question like sort of.

01:21:46.000 --> 01:21:51.000
Yeah.

01:21:51.000 --> 01:21:54.000
So we can go to where we are writing the functions.

01:21:54.000 --> 01:21:57.000
And while we're writing the test. Look good for writing the test.

01:21:57.000 --> 01:22:00.000
Okay.

01:22:00.000 --> 01:22:07.000
So you see where the debug prints resource resource one, two, three, and other ones?

01:22:07.000 --> 01:22:26.000
Why don't we also writes a function that can maybe help us simplify as declaring the function real by real but so that it won't have… you have to pre-in code multiple times and then we apply the principles and functions into it.

01:22:26.000 --> 01:22:29.000
I don't really get you.

01:22:29.000 --> 01:22:33.000
Can you scroll up a bit? We see we declared the results for the variables, right?

01:22:33.000 --> 01:22:39.000
So we have resource one resource two resource three add to their results 20 or so.

01:22:39.000 --> 01:22:40.000
Yeah.

01:22:40.000 --> 01:22:53.000
I was thinking, is there anywhere whereby we can also use the idea of point chains to be able to simplify that cursor that we don't have to repeat If whenever we have a new test to write, we don't have to repeat

01:22:53.000 --> 01:22:55.000
Declaring a new variable.

01:22:55.000 --> 01:22:59.000
Okay, can you tell me 10 or 5 minutes for that?

01:22:59.000 --> 01:23:05.000
But what I'm trying to explain over here is… I'm just calling a financing.

01:23:05.000 --> 01:23:09.000
Yeah, I want to explain why is at any moment in time in my court.

01:23:09.000 --> 01:23:23.000
If at any moment in time you might… I want to use a i want to make an addition I don't need to declare a new variable and say This equals B plus A.

01:23:23.000 --> 01:23:31.000
I can just call this my normal function. So in any point of my food, I'm not going to use I'll just call this function.

01:23:31.000 --> 01:23:41.000
And that will be returned as soon. I think it's because it's a test you to assign it to some output.

01:23:41.000 --> 01:23:47.000
But if it was anywhere here in my food. And probably in some way they're mindful.

01:23:47.000 --> 01:23:56.000
After I do much supply entries. From the result i am getting over you. I can pass that result just following this function.

01:23:56.000 --> 01:24:09.000
This means we retain it as a result instead of clearing another variables against.

01:24:09.000 --> 01:24:28.000
Yeah, I do. I do. I do. Thank you.

01:24:28.000 --> 01:24:34.000
Is he like this? This contains a significant fancy.

01:24:34.000 --> 01:24:43.000
Release financial contest. Is going to check whether a specific ID the same charities is going to retain an outcome.

01:24:43.000 --> 01:25:06.000
Dashboard is continuous raking. So instead of you always writing text Write me plenty checks, glory check which report is contains It tends to if there's a value associated with the That's what is contained method which is metal are sometimes function and it's worse

01:25:06.000 --> 01:25:23.000
At any moment, 45 quality data. But it says… You just need to assign it to something to get an output to show that your test is working.

01:25:23.000 --> 01:25:29.000
I will play with Francine. I want one person. Little questions.

01:25:29.000 --> 01:25:34.000
I don't know if I'll wrap up as much in the small community.

01:25:34.000 --> 01:25:48.000
Starts, abilities. And the vectors, references, and probably busy resource management then there will be time to error online and some sessions.

01:25:48.000 --> 01:25:49.000
Okay, hello.

01:25:49.000 --> 01:25:52.000
So I'll wrap up by Twin.

01:25:52.000 --> 01:26:03.000
Okay, so please can I go back to me? For sure you neglect like

01:26:03.000 --> 01:26:07.000
In the ad could, right?

01:26:07.000 --> 01:26:12.000
Yes.

01:26:12.000 --> 01:26:20.000
I want to ask you to write a fine thing from scratch on our own. You get to see how it goes.

01:26:20.000 --> 01:26:22.000
Okay, so…

01:26:22.000 --> 01:26:25.000
You can ask your question.

01:26:25.000 --> 01:26:29.000
It's outside. Ask me something clay.

01:26:29.000 --> 01:26:35.000
So we declare the fruition, eh? He goes, you know.

01:26:35.000 --> 01:27:03.000
I won't like really difficult newbies. Public shows that the function is public then the phone is to show that it is a functional lobby. It's already full function well like it's rated on a certain level okay the name of this function is now add

01:27:03.000 --> 01:27:04.000
Oh, yeah, right. You are right. Which is there.

01:27:04.000 --> 01:27:10.000
Underscore and underscore trees. And the function is taking to argument if i'm right i'm trying to like assume maybe it's kind of like what i'm thinking if it's right Okay, just taking into argument that

01:27:10.000 --> 01:27:14.000
Modifiers by Congo.

01:27:14.000 --> 01:27:19.000
Okay, so it's taken to argument A and B. So we already know that.

01:27:19.000 --> 01:27:31.000
And also assigned to them to show that, okay, these are integers and it's performing calculation so we have declined this function to be this So what we are going to use to call the function is like the functioning like he did the

01:27:31.000 --> 01:27:36.000
Yeah.

01:27:36.000 --> 01:27:55.000
Add underscore and underscore trees the way you did the first time sorry please slow down that place that you call the function again i want to like check something

01:27:55.000 --> 01:27:57.000
Hope you can see it, right?

01:27:57.000 --> 01:28:11.000
Okay. Yeah, so I didn't really get Oh, you really got the photos. The way you call the function now is you just use public phone then you call the this is like the test so i want to just get

01:28:11.000 --> 01:28:16.000
How you call the function. Yeah.

01:28:16.000 --> 01:28:27.000
What does it mean that I call a function? To perform tax and all that. And can you apart from this particular code Can I still call this for show me what you are.

01:28:27.000 --> 01:28:33.000
Create the new code like when you write the new program so can you put like call the same function niggiene.

01:28:33.000 --> 01:28:34.000
I need to work in another

01:28:34.000 --> 01:28:41.000
Yeah, yeah, yeah. That's the worst case scenario I asked. So you see and so that was it.

01:28:41.000 --> 01:28:58.000
You made mention of the public Companies the function and they add increases the name of the pricing. That's a perfect And these are the parameters I'm passing.

01:28:58.000 --> 01:29:04.000
So we have access modifiers. So we have public. The moment I make the affliction public.

01:29:04.000 --> 01:29:14.000
It is accessible from other models which is the question your accent. If I don't have any modifiers, if I don't at public Uber here.

01:29:14.000 --> 01:29:17.000
Then automatically the function is smooth.

01:29:17.000 --> 01:29:20.000
Okay.

01:29:20.000 --> 01:29:25.000
Automatically the function is It's private, right?

01:29:25.000 --> 01:29:26.000
Wait.

01:29:26.000 --> 01:29:29.000
You get it. Yeah, so if I add public over here.

01:29:29.000 --> 01:29:33.000
Ish.

01:29:33.000 --> 01:29:41.000
If I create a new, I can only call it within this package. I cannot go and call it within a standard package.

01:29:41.000 --> 01:29:49.000
I added a new package by here. Are two plots.

01:29:49.000 --> 01:30:00.000
Right. I can import I can call this function.

01:30:00.000 --> 01:30:08.000
In action perfume.

01:30:08.000 --> 01:30:11.000
Okay, you can only call it within the package. Okay.

01:30:11.000 --> 01:30:19.000
Within a package, but outside the package cannot follow. Anything within their practice wants equality are supposed to make it public.

01:30:19.000 --> 01:30:24.000
Today our public sewer is what makes it or if you call in mini pack.

01:30:24.000 --> 01:30:28.000
You see, there's one function over here. By you.

01:30:28.000 --> 01:30:40.000
There's nothing like public attached to it. And this fashion looks impossible. This function runs once.

01:30:40.000 --> 01:30:45.000
I only recall once. To Rasme, I publish that application.

01:30:45.000 --> 01:30:57.000
Once I formed the application, this function will automatically be called It means you run once once it's once we cannot call this And it's a private financial like you can see.

01:30:57.000 --> 01:31:04.000
You need to mention a composition. Private you can just have one.

01:31:04.000 --> 01:31:11.000
In a particular class. Okay, you understand how it means.

01:31:11.000 --> 01:31:15.000
Okay, so Deepat, I was calling about, calling, calling, calling, calling, calling.

01:31:15.000 --> 01:31:21.000
Okay, okay. You said how, hey, they're falling off. Pricing, right?

01:31:21.000 --> 01:31:27.000
So when I'm calling the pharmacy.

01:31:27.000 --> 01:31:35.000
All I need is just pass the fancy name. See, even if I over over it.

01:31:35.000 --> 01:31:40.000
Umarit. Really where the function is coming from.

01:31:40.000 --> 01:31:43.000
Okay, I see. So I conclude a function this way over here.

01:31:43.000 --> 01:31:47.000
Okay.

01:31:47.000 --> 01:31:51.000
My account code is gone.

01:31:51.000 --> 01:31:52.000
The results report and finds me.

01:31:52.000 --> 01:31:58.000
Only they are using to call it. Tazoo.

01:31:58.000 --> 01:31:59.000
Pardon? Through is out. Yeah, just a function. No, at least nothing.

01:31:59.000 --> 01:32:04.000
I said, just the phone.

01:32:04.000 --> 01:32:05.000
This is how we call financing. Oh, he's gauge.

01:32:05.000 --> 01:32:09.000
Two.

01:32:09.000 --> 01:32:14.000
Fast this name. In the argument, it accepts it.

01:32:14.000 --> 01:32:21.000
And if I run this boot If I tested this U.S.

01:32:21.000 --> 01:32:26.000
I'm not going to give us anyhow.

01:32:26.000 --> 01:32:32.000
Okay.

01:32:32.000 --> 01:32:36.000
Why didn't keep asking us?

01:32:36.000 --> 01:32:59.000
It's because I wanted to print the output. That's the reason why I was assigning Like I told you rambles without even talking about signing environment. So I was just assigning the outputs to results Like when I started travel and clarification. I made mention of that.

01:32:59.000 --> 01:33:14.000
When I started viral flourishing over here. I will mention that this In any way I put this in my

01:33:14.000 --> 01:33:15.000
Okay. Yeah.

01:33:15.000 --> 01:33:24.000
Yes. Yes. So what I was just doing is I just, because I wanted you to see the output of this particular function.

01:33:24.000 --> 01:33:30.000
I was assigning it to your variable. And I was printing that variable for you.

01:33:30.000 --> 01:33:32.000
Okay, thank you.

01:33:32.000 --> 01:33:36.000
Any other?

01:33:36.000 --> 01:33:40.000
Another question for me.

01:33:40.000 --> 01:33:46.000
Yeah, so I'm wrapping up each question. It's more we write your question then.

01:33:46.000 --> 01:33:52.000
And some other stuff which are more move move kind of deleted.

01:33:52.000 --> 01:34:03.000
Stuff. Once he's done today, applies to all programming languages you can apply the analogy any programming language you come across.

01:34:03.000 --> 01:34:14.000
And these are a kind of logic figures combined together to form any application you are asking is this kind of Fundamentals.

01:34:14.000 --> 01:34:18.000
You combine speed application. It is very important for you to understand it.

01:34:18.000 --> 01:34:29.000
Fundamentals how they work to any other questions.

01:34:29.000 --> 01:34:40.000
Hello and welcome to This tutorial is

01:34:40.000 --> 01:34:47.000
Are we okay?

01:34:47.000 --> 01:34:52.000
Yes, I think so.

01:34:52.000 --> 01:35:02.000
Okay, there's a question here. Please, if you send a question to the chat box and let me sweat at our opening certificates.

01:35:02.000 --> 01:35:16.000
So there's a question if I want to look through from Okay, this question, I answered it is right.

01:35:16.000 --> 01:35:24.000
And there's a question from Sammy. Do you mean explain it in a parallel way?

01:35:24.000 --> 01:35:36.000
Can you kindly explain these questions in my life? Trim the question or anyone who understand that question can you share me to go for me?

01:35:36.000 --> 01:35:38.000
Yeah, hello. Yeah, I think I typed that.

01:35:38.000 --> 01:35:43.000
Yeah, hello.

01:35:43.000 --> 01:35:47.000
You know what I mean, I think someone asked the question.

01:35:47.000 --> 01:36:00.000
And then you're trying to explain that it's printed line by line. So I was just thinking does you mean it brings in a broader way.

01:36:00.000 --> 01:36:17.000
It screens. Whatever, Swiss like It's where Oh, there's a word for it. Anyone you can help me that way.

01:36:17.000 --> 01:36:22.000
The program is how how those kind of RBC.

01:36:22.000 --> 01:36:31.000
When a compiler works by checking line of foot line by line by line, there's a wait for that.

01:36:31.000 --> 01:36:39.000
Any program the program is kita allel

01:36:39.000 --> 01:36:44.000
I don't really get the question. Let me see if I can try.

01:36:44.000 --> 01:36:55.000
You see and this is how programming compiler works See, the compiler always with it doesn't is where it runs the code line by line.

01:36:55.000 --> 01:37:08.000
So it comes is reached 945, 946, 947. So when I was painting the results, he was saying I was like, my interest is speaking in a parallel way. I'm just trying to see that.

01:37:08.000 --> 01:37:15.000
Because the compiler already before line 65.

01:37:15.000 --> 01:37:20.000
I'm clear on this one.

01:37:20.000 --> 01:37:29.000
Yes, it just blind by line because in some programming languages, if you want to compile your code okay let's say like an interpreter, like you mentioned before right on to I do it like line by line too.

01:37:29.000 --> 01:37:36.000
Aha, synchronous. Thanks, thanks, thanks.

01:37:36.000 --> 01:37:37.000
Oh. Yeah, yeah, yeah.

01:37:37.000 --> 01:37:46.000
So I had an idea and said sequence on the um In this form.

01:37:46.000 --> 01:37:50.000
Thank you. Any other one? Thanks.

01:37:50.000 --> 01:37:56.000
Also, it could also be… related depending on the language.

01:37:56.000 --> 01:38:01.000
Some languages like Kotlin and Athens, you can be able to add breakpoints to your code.

01:38:01.000 --> 01:38:17.000
And then they become asynchronous and then it can jump the code and probably when you're doing ui And those are like mobile apps and maybe working on threads Yeah, you can be able to skip lines of code, but it's just probably error in the bargain.

01:38:17.000 --> 01:38:21.000
So I think it also depends on the language as well.

01:38:21.000 --> 01:38:22.000
Okay.

01:38:22.000 --> 01:38:30.000
Actually, I think there's that in which they move if you are using the wow like the loops. You can add break and continue.

01:38:30.000 --> 01:38:41.000
Media code. But I see… There are some stuff in languages you know it's not everything that we made use of. Yeah, they are just there, but we don't really use it.

01:38:41.000 --> 01:38:51.000
Those kind of stuff if you are using it and you don't take it, you end up writing backs You just need to use it carefully.

01:38:51.000 --> 01:38:55.000
Go for thanks for your… Have you seen.

01:38:55.000 --> 01:38:59.000
Yeah, I think I agree with you.

01:38:59.000 --> 01:39:03.000
Yeah.

01:39:03.000 --> 01:39:04.000
Telegraph.

01:39:04.000 --> 01:39:20.000
Yeah, lie on. So what I wanted to add to what you were saying is that When it comes to like move, right? Like we execute like from one line to the other, right? And this is different from other programming languages.

01:39:20.000 --> 01:39:32.000
Because if you take a look at node.js which is like the event-based stuff, right? It's totally different so for move let's look at it as well.

01:39:32.000 --> 01:39:46.000
Once we are done with 45, we move to 46. 47, 48, then you're able to follow like you know theological steps through your code so that you don't get confused along the way.

01:39:46.000 --> 01:39:48.000
All right. Thank you. Yeah, thank you.

01:39:48.000 --> 01:39:53.000
Awesome. Awesome. Yeah.

01:39:53.000 --> 01:40:03.000
Any other addition or question? Probably a sub trash.

01:40:03.000 --> 01:40:22.000
I think just like Mr. Douglas was saying. Thank you to note where do you see these concurrent streets and all that so It responds as like it will be it will be online maybe let's say line 40 something and if you see a trade that needs attention, then it will jump to that.

01:40:22.000 --> 01:40:37.000
So I think movies quite specific. Uh-huh. But maybe something like note it would just be, let me say node of priority or something like concurrently

01:40:37.000 --> 01:40:46.000
All right. Thanks. Thanks.

01:40:46.000 --> 01:40:52.000
There's no question. I think you can wrap up the day.

01:40:52.000 --> 01:40:58.000
I hope you understand what And if you really understand.

01:40:58.000 --> 01:41:06.000
You don't need to understand everything, okay? You just need to keep practicing programming i always say is 90% successful.

01:41:06.000 --> 01:41:12.000
So whatever.

01:41:12.000 --> 01:41:22.000
Whatever. I'm doing today is more like… Oh, anyway, in primary schools learn alphabet.

01:41:22.000 --> 01:41:29.000
So when we lent alphabet and we used to let us and we haven't taught all the English West.

01:41:29.000 --> 01:41:40.000
But today you complete any book and you can read it that was because you took your SSO and your G0O CEO.

01:41:40.000 --> 01:41:41.000
Oh.

01:41:41.000 --> 01:41:51.000
And you understood everything. So that's how programming works. You need to understand the basis of and if you understand the basic wallet you can just apply it and you can write Any logic we want to write. And it doesn't matter the language.

01:41:51.000 --> 01:41:55.000
Once you understand how programming works, you can adapt to any language easily.

01:41:55.000 --> 01:41:58.000
Yeah, so let's take this as we are learning as well so soon No, go.

01:41:58.000 --> 01:42:08.000
These are these two alphabets.

01:42:08.000 --> 01:42:10.000
Yalenin.

01:42:10.000 --> 01:42:15.000
Oh, fucked up.

01:42:15.000 --> 01:42:20.000
Yeah.

01:42:20.000 --> 01:42:21.000
Oh, yeah, that's what I'm trying to say. Don't give up.

01:42:21.000 --> 01:42:24.000
I've like

01:42:24.000 --> 01:42:27.000
Because, ma'am, we land as also and geo go. We didn't understand it. You always keep reciting it.

01:42:27.000 --> 01:42:34.000
Okay.

01:42:34.000 --> 01:42:35.000
Okay, okay.

01:42:35.000 --> 01:42:45.000
You kept reciting it before we became familiar before we started reading books and sometimes you break it we break it to combine the work CO2, D-A-Y-D. Today.

01:42:45.000 --> 01:42:48.000
So that programming was the worst. We are just learning the basics.

01:42:48.000 --> 01:42:50.000
No.

01:42:50.000 --> 01:42:56.000
Yeah, so we will combine it later to create an application so if you are able to follow up to end the last week.

01:42:56.000 --> 01:43:04.000
Focus there. Okay. Thank you. I'm consumed, I'm consumed. Ask for follow-up. I need follow-up today.

01:43:04.000 --> 01:43:08.000
All right, sure. Thanks.

01:43:08.000 --> 01:43:13.000
Of course, I didn't leave the class I didn't really get what you were doing.

01:43:13.000 --> 01:43:16.000
Frankly.

01:43:16.000 --> 01:43:22.000
Yeah, I get it. I know some of us. If this is your first time.

01:43:22.000 --> 01:43:28.000
It's going to be difficult for you to understand it. So all you need to do is just Part 6. Yes.

01:43:28.000 --> 01:43:37.000
Go to it. Just be curious about whatever he wants If we are really curious, I believe it can be.

01:43:37.000 --> 01:43:38.000
A little bit.

01:43:38.000 --> 01:43:49.000
Post video programming is just out there. Free on every platform you just need curiosity to learn So QRCC and consistency that's what keeps the flow back in the loop.

01:43:49.000 --> 01:43:59.000
Yeah, so whatever we have done today It's actually AVCD.

01:43:59.000 --> 01:44:00.000
Yeah.

01:44:00.000 --> 01:44:08.000
No problem. No. If you can just interpret all those numbers to english or french or German.

01:44:08.000 --> 01:44:15.000
Something straight i read it back.

01:44:15.000 --> 01:44:23.000
Oh. You'll get it then.

01:44:23.000 --> 01:44:24.000
Oh, worry less, worry less you will get it. Worry less.

01:44:24.000 --> 01:44:29.000
Your best dress craft.

01:44:29.000 --> 01:44:33.000
And someone's watching off their YouTube channel. Yeah, there's a YouTube channel to learn more.

01:44:33.000 --> 01:44:44.000
Let me see. They don't take you from busy so they just explain stuff like they they explain it like you know small item lecture.

01:44:44.000 --> 01:44:49.000
And if you're in the WhatsApp group, I'll send those i'll send a link to the YouTube code.

01:44:49.000 --> 01:45:00.000
Video for you to go and watch. But like I'm saying You're not going to explain it by breaking stuff to you Even the YouTube video, some of them they don't write code they just show good screenshots and they explain it

01:45:00.000 --> 01:45:10.000
Why he really wants to be good in move. I bet what the best way to reach the move book which i have been seeing it is their move book, their move book, move book.

01:45:10.000 --> 01:45:19.000
And with their move book, there's a whole lot of reading for every line of code that they write, there's a whole lot of reading that is in that line of code.

01:45:19.000 --> 01:45:41.000
Let me say two sections every day try to reach those two sessions two sections You don't need to understand everything. You grab the business and if you grab the basics, yeah, you can do it.

01:45:41.000 --> 01:45:52.000
Yeah, so if that means we can come in and you wrap up the day for us.

01:45:52.000 --> 01:45:58.000
Okay, thank you so much, Lion. Well, a wonderful session tonight.

01:45:58.000 --> 01:46:15.000
I actually thought you would not be able to make it to class but as a good teacher you're able to come So we had an event today and Clian had to talk for a long time he had to stand and talk for a long time and

01:46:15.000 --> 01:46:27.000
Somehow, I thought maybe today we'll just say good night because i was actually going like I wanted to go and sleep but he said no he would make it to class so i had to associate a week.

01:46:27.000 --> 01:46:36.000
Okay, Lane, I think someone is asking a question. Do you have a video on how to set up move on Windows?

01:46:36.000 --> 01:46:41.000
I think there's a video like do you have a video like that

01:46:41.000 --> 01:46:53.000
Yeah, there's a video I've posted. I don't know if the person I know some of you some of uh has joined today And I'll repost all those things and I'll pin them.

01:46:53.000 --> 01:47:07.000
Who is asking for item 13? We'll ship it the next the next morning to Nigeria for you. So you will get it, yeah.

01:47:07.000 --> 01:47:14.000
So um Leah, you said you have a video on.

01:47:14.000 --> 01:47:15.000
Yeah, I was thinking if you did.

01:47:15.000 --> 01:47:27.000
Okay, yeah, so he's asking about the move book kindly um share the move book in the our WhatsApp group so that anyone can access it Okay.

01:47:27.000 --> 01:47:47.000
So for the two days we've had the classes we've posted the the videos and whatsapp group so if you have any difficulty setting up CLI, you can kindly go through the go the recordings to see how you can set up

01:47:47.000 --> 01:47:58.000
You can install your CLI. Then you can just get started. If you get stuck anywhere, you can just reach out in the group and people would i think to you, okay?

01:47:58.000 --> 01:48:03.000
So we'll be meeting again tomorrow, same time, 8 p.m. Utc time.

01:48:03.000 --> 01:48:13.000
And yeah, I think we'll have to end. Nights okay it's past 10. I don't want us to be staying more than 10 p.m.

01:48:13.000 --> 01:48:19.000
Later than 10 p.m. Okay. And thank you guys so much for participating today.

01:48:19.000 --> 01:48:39.000
Some… Lawrence benefits gail everyone everyone who showed up today and stated to the class. Thank you guys so much and so much we'll see again tomorrow, tomorrow evening yeah good night. We're ending the class now.

01:48:39.000 --> 01:48:46.000
Lyon, I think you'll have to end from your side, okay?

01:48:46.000 --> 01:48:47.000
Good night, everyone. Bye.

01:48:47.000 --> 01:48:51.000
Yeah, thank you too. Thank you. Thank you. Yeah, good night. Yeah, bye.

